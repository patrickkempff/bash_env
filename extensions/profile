#!/bin/bash

profile_requirements() {
    return 0;
}

profile_load() {

    # Test if user is root and set user color appropriately
    if [[ $(id -u) == 0 ]]
    then
        export PS1USERCOLOR="\[\033[31m\]"
    else
        export PS1USERCOLOR="\[\033[36m\]"
    fi

    export PS1="$PS1USERCOLOR\u\[\033[m\]@\[\033[32m\]\h\[\033[m\]:\[\033[33;1m\]\w\`if type profile_parse_git_branch > /dev/null 2>&1; then profile_parse_git_branch; fi\`\`if [ \$? = 0 ]; then echo -e '\[\033[m\]\$'; else echo -e '\[\e[31m\]\$'; fi\` \[\033[m\]"

    export CLICOLOR=1
    export LSCOLORS=ExFxBxDxCxegedabagacad

    # Environment variables to set prompt format and color 
    export COLOR_BOLD="\[\e[1m\]"
    export COLOR_DEFAULT="\[\e[0m\]"

    # Set default blocksize, get consistent output across "du", "df", and "ls -s".
    export BLOCKSIZE=1k

    # Set the default editor to Nano.
    export EDITOR=/usr/bin/nano

    export HISTCONTROL=erasedups
    export HISTSIZE=10000

    alias paths='echo -e ${PATH//:/\\n}'    	# Echo all executable Paths    
}


# get current branch in git repo
function profile_parse_git_branch() {
        BRANCH=$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
        if [ ! "${BRANCH}" == "" ]
        then
                STAT=$(profile_parse_git_dirty)
                echo " [${BRANCH}${STAT}]"
        else
                echo ""
        fi
}

# get current status of git repo
function profile_parse_git_dirty {
        status=$(git status 2>&1 | tee)
        dirty=$(echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?")
        untracked=$(echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?")
        ahead=$(echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?")
        newfile=$(echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?")
        renamed=$(echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?")
        deleted=$(echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?")
        bits=''
        if [ "${renamed}" == "0" ]; then
                bits=">${bits}"
        fi
        if [ "${ahead}" == "0" ]; then
                bits="*${bits}"
        fi
        if [ "${newfile}" == "0" ]; then
                bits="+${bits}"
        fi
        if [ "${untracked}" == "0" ]; then
                bits="?${bits}"
        fi
        if [ "${deleted}" == "0" ]; then
                bits="x${bits}"
        fi
        if [ "${dirty}" == "0" ]; then
                bits="!${bits}"
        fi
        if [ ! "${bits}" == "" ]; then
                echo " ${bits}"
        else
                echo ""
        fi
}
